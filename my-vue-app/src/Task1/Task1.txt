Q. 타입스크립트란? (300자 이상)

  2012년 마이크로소프트가 발표하였으며, JavaScript를 기반으로 정적 타입 문법을 추가한 프로그래밍 언어이다.

  JavaScript와 달리 변수에 타입을 명시하고, 함수의 매개변수와 반환값에 대한 타입을 정의할 수 있다.
  타입을 명시하면 코드를 작성하는 동안 오류를 더 빨리 발견할 수 있다.
  타입 주석, 제네릭, 인터페이스, 클래스 등의 기능을 제공하여 코드의 가독성과 유지 보수성을 높일 수 있다.

  [타입스크립트의 특징]
    1. 컴파일 언어, 정적 타입 언어
      - 컴파일을 하는 과정에서 타입을 결정하게 됨으로 컴파일 에러를 예방할 수 있으며, 손쉬운 디버깅이 가능해진다.

    2. 자바스크립트 슈퍼셋(Superset)
        - 상위 확장자로 JavaScript 엔진을 사용하며 자신이 원하는 변수의 타입을 정의하고, 프로그래밍을 하면 JavaScript로 컴파일되어 실행할 수 있다.
        - 기존의 JavaScript로 짜인 코드에 확장하는 식으로 대규모 수정 없이도 TypeScript 적용이 가능하다.

        * 슈퍼셋이란? 특정한 언어의 모든 기능을 포함하면서 다른 기능까지 활용 가능하도록 확장된 것

    3. 객체 지향 프로그래밍 지원
      - JavaScript로 코드를 작성할 때 객체의 필드나 함수의 매개변수로 들어오는 값이 무엇인지 알기 위해 여러 파일을 살펴야 했지만,
        TypeScript를 사용한다면 변수의 이름뿐만 아니라 데이터의 자료형까지 알 수 있다.
        => 객체 안의 필드 값을 다 기억할 필요없이 IDE가 자동으로 리스트업을 해주기 때문에 생산성에 기여한다.

  [JavaScript와 TypeScript의 차이]
    1. 동적 타입 언어 VS 정적 타입 언어
      - JavaScript는 동적 타입 언어로 배우기 쉽고 유연한 장점이 있지만 런타임 에러 발생 가능성을 가지고 있다.
      - TypeScript는 정적 타입 언어로 변수의 타입을 명시적으로 지정해 사용하기 때문에 오류가 생기는 것을 방지할 수 있다. (타입 어노테이션 활용)

      * 동적 타입 언어란? 변수의 타입이 런 타임(실행 시간)에 결정된다.

    2. 인터프리터 언어 VS 컴파일 언어
      - JavaScript는 인터프리터 언어이다.
        - 인터프리터 언어란 소스 코드를 한 줄 한 줄 읽어가며 명령을 바로 처리하는 언어로, 코드가 즉시 실행되기 때문에 컴파일 언어에 비해 빠르다는 장점이 있다.
      - TypeScript는 컴파일 언어이다. 
        - 컴파일 언어란 소스코드 전체를 컴퓨터가 이해할 수 있는 기계어로 변환하는 언어로, 변환가 실행이 따로 이루어진다.
        - 소스코드를 기계어로 번역하는 과정에서 인터프리터 언어에 비해 시간이 오래 걸리지만 헌타임 상황에서는 모든 소스코드가 변환되어 있기에 빠르게 실행할 수 있다.

  [TypeScript의 단점]
      1. 초기 세팅의 어려움
        - 기존의 JavaScript 엔진에서 실행됨으로 TypeScript 사용을 위해 기본적으로 설치해야 하는 모듈들이 있으며, 컴파일을 하기 위한 옵션 설정도 필요하다.

      2. 타입 지정으로 인한 생산성 저하 우려
        - 매번 타입을 지정해줘야하는 번거로움과 타입 어노테이션으로 인한 타입 에러로 실제 개발보다 타입을 지정하는 데 시간을 더 할애할 수도 있다.
        - interface, class 등에 매번 변수명을 지정하면서 길어지는 변수명과 관리 포인트가 늘어나기 때문에 TypeScript에 익숙하지 않다면 생산성이 저하될 수 있다.