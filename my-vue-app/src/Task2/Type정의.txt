[타입스크립의 기본 타입]
- number (숫자형)
  : Javascipt의 number 자료형을 그대로 사용하며, 16진수, 10진수, 8진수, 2진수 리터럴 지원
    모든 숫자를 지원하는 type이다.

- string (문자열)
  : 문자열을 나타내며, 작은따옴표('), 큰따옴표(")를 사용해서 문자열 데이터를 감싼다.
    ES6의 템플릿 문자열도 string 타입에 포함 된다.

- boolean (불리언)
  : 참(true)/거짓(false)을 나타내는 type이다.

- any
  : 모든 타입에 대해서 허용하는 타입이다.
    알지 못하는 타입을 표현해야하는 경우가 존재할 수 있기 때문에 존재한다.
    * 타입의 안정성을 보장하지 않아서 권장하지 않는다!!

- object (객체)
  : Javascipt와 마찬가지로 객체 뿐만 아니라 배열, 함수까지 object로 포함된다.
    기본적으로 typeof 연산자가 "object"로 반환하는 모든 타입을 뜻한다.
    ** 여러 타입이 인식되기 떄문에 타입스크립트에서 object를 그대로 쓰기에는 애로사항이 많다.
    ** 구체적인 유형을 지정해주는 것이 좋다!!

- array (배열)
  : 순차적인 값을 갖는 배열을 나타낸다.
    배열 타입은 두 가지 방법으로 쓸 수 있다.
    1. 배열 요소들을 나타내는 타입 뒤에 []를 쓴다.
    2. Array<> 배열 타입을 쓴다.
    ex) const arr1:(string|number)[] = ["퇴근", 4, 3, "출근"]
        const arr2:Array<string|number> = [9, "휴식", "집갈래", "12", 12]
    * 배열의 값을 단언할 수 없다면, any를 사용한다.
        const someArr: any[] = ["", 10, true, false]
    * readonly, ReadonlyArray타입을 사용해서 읽기 전용 배열도 생성할 수 있다.

- unknown (알 수 없는 타입)
  : 알 수 없는 타입을 의미한다.
    any와 같이 모든 데이터 타입을 받을 수 있다.
    어떤 타입의 값도 할당할 수 있지만, 해당 값을 사용하기 위해서는 추가적인 검사나 타입 단언이 필요하다.
    unknown을 다른 type에 할당할 수는 없다.
    단, any와 unknown은 서로 할당 가능하다.
    ** 타입 안정성을 유지하면서 "any"보다 명시적인 유형이다.

- union, conditional
  : 2개 이상의 타입을 허용하는 경우를 "union"이라고 한다.
    | 키워드를 사용해서 type을 구분한다.

- type alias (type 리터럴)
  : 특정 타입에 대한 새로운 이름(별칭)을 정의하는데 사용한다.
    사용자가 정의하는 타입의 변수이다.

- interface (type 리터럴)
  : 상호 간에 정의한 약속 혹은 규칙이다.
      무엇에 대한 약속인가?
        객체의 스펙(속성과 속성의 타입)
        함수의 파라미터
        함수의 스펙(파라미터, 반환 타입 등)
        배열과 객체를 접근하는 방식
        클래스




[타입스크립트의 유틸리티 타입]
유틸리티 타입?
  타입을 변환하거나 새로운 타입을 생성하는데 사용된다.
  * Partial<T>는 T의 모든 속성을 선택적으로 만든다.

- enum (= enumerated type)
  : 열거형 enum은 연관된 상수(특정 값)의 집합으로, 특정 값을 고정하는 독립된 자료형이다.
    기본적으로 숫자 또는 문자열로 이루어진 상수를 정의할 수 있다.
    열거형은 관련 값 모음을 구성하는 방법이다.
    값들의 집합을 명명하고 사용할 수 있게 한다.
    인덱스 번호로도 접근할 수 있다.
    * 숫자형, 문자형, 복합형 Enum 등

- as const
  : 상수 배열 또는 객체를 읽기 전용으로 선언한다.
    타입 추론을 활용하려 리터럴 타입으로 변환할 수 있다.

- record
  : 주어진 타입 'T'의 모든 속성에 대해 새로운 타입을 생성한다.
    객체의 속성을 맵핑하여 새로운 타입을 생성할 때 사용한다.
    Key를 속성으로, Type을 그 속성 값의 타입으로 지정하는 새로운 타입을 반환한다.
    * 대표타입 : interface

- partial
  : 주어진 타입 'T'의 모든 속성을 선택적으로 변경한 새로운 타입을 반환한다.
    객체의 일부 속성만 필요한 경우 사용할 수 있다.
    * 대표타입 : interface

- omit
  : 주어진 타입 'T'에서 지정된 속성(key)을 제거하고 나머지를 새로운 타입으로 반환한다.
    특정 속성을 제외한 타입을 만들 때 사용한다.
    * 대표타입 : interface

- pick
  : 주어진 타입 'T'에서 지정된 속성(Key)만 선택한 새로운 타입을 반환한다.
    특정 속성만 포함한 타입을 만들 때 사용한다.
    * 대표타입 : interface

- extract
  : 주어진 타입 'T'에서 지정된 조건을 만족하는 속성만 추출한 새로운 타입을 생성한다.
    특정 조건을 만족하는 타입을 추출할 때 사용한다.
    Type1에서 Type2를 추출한 새로운 타입을 반환한다.
    * 대표타입 : union

- returntype
  : 함수의 반환 타입을 새로운 타입으로 반환한다.
    주어진 타입 'T'에서 반환 타입을 추출하여 새로운 타입을 생성한다.

- optional
  : 주어진 타입 'T'에서 모든 속성을 선택적으로 만든다.
    기존 타입의 모든 속성을 선택적으로 변경하여 새로운 타입을 생성한다.

- satisfies
  : 주어진 타입 'T'에서 지정된 조건을 만족하는지 확인한다.
    주어진 조건을 만족하는지 여부를 판단하여 true/false를 반환한다.

- generic
  : 제네릭 타입을 정의한다.
    타입을 변수화 하였다고 생각할 수 있다.
    타입을 마치 함수 파라미터처럼 나중에 대입하도록 하여 재사용 가능한 코드를 작성하거나 다양한 유형의 데이터를 처리하는데 유용하다.
    * 제네릭 선언 문법
      <T>