[타입스크립의 기본 타입]
- number (숫자형)
  : Javascipt의 number 자료형을 그대로 사용하며, 16진수, 10진수, 8진수, 2진수 리터럴 지원
    모든 숫자를 지원하는 type이다.

- string (문자열)
  : 문자열을 나타내며, 작은따옴표('), 큰따옴표(")를 사용해서 문자열 데이터를 감싼다.
    ES6의 템플릿 문자열도 string 타입에 포함 된다.

- boolean (불리언)
  : 참(true)/거짓(false)을 나타내는 type이다.

- any
  : 모든 타입에 대해서 허용
    알지 못하는 타입을 표현해야하는 경우가 존재할 수 있기 때문에 존재한다.
    * 권장하지 않는다!!

- object (객체)
  : Javascipt와 마찬가지로 객체 뿐만 아니라 배열, 함수까지 object로 포함된다.
    기본적으로 typeof 연산자가 "object"로 반환하는 모든 타입을 뜻한다.
    ** 여러 타입이 인식되기 떄문에 타입스크립트에서 object를 그대로 쓰기에는 애로사항이 많다.

- array (배열)
  : 순차적인 값을 갖는 배열을 나타낸다.
    배열 타입은 두 가지 방법으로 쓸 수 있다.
    1. 배열 요소들을 나타내는 타입 뒤에 []를 쓴다.
    2. Array<> 배열 타입을 쓴다.
    ex) const arr1:(string|number)[] = ["퇴근", 4, 3, "출근"]
        const arr2:Array<string|number> = [9, "휴식", "집갈래", "12", 12]
    * 배열의 값을 단언할 수 없다면, any를 사용한다.
        const someArr: any[] = ["", 10, true, false]
    * readonly, ReadonlyArray타입을 사용해서 읽기 전용 배열도 생성할 수 있다.

- unknown (알 수 없는 타입)
  : 알 수 없는 타입을 의미
    any와 같이 모든 데이터 타입을 받을 수 있다.
    어떤 타입의 값도 할당할 수 있지만, unknown을 다른 type에 할당할 수는 없다.
    단, any와 unknown은 서로 할당 가능하다.

- union, conditional
  : 2개 이상의 타입을 허용하는 경우를 "union"이라고 한다.
    | 키워드를 사용해서 type을 구분한다.

- type alias (type 리터럴)
  : 

- interface (type 리터럴)
  :



[타입스크립트의 유틸리티 타입]
- enum (= enumerated type)
  : 특정 값(상수)들의 집합, 열거형
    열거형은 관련 값 모음을 구성하는 방법이다.
    값들의 집합을 명명하고 사용할 수 있게 한다.
    특정 값을 고정하는 독립된 자료형
    인덱스 번호로도 접근할 수 있다.

- as const

- record

- partial

- omit

- pick

- extract

- returntype

- optional

- satisfies

- generic