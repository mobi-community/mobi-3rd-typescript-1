1. 개발 문서화
2. 생산성 (자동완성)
3. 안정적인 개발 환경 (컴파일 단계에서의 에러 검출)
​
Q. 위의 목록을 참고하여 타입스크리의 장점을 알고 어느 순간 사용해야할지 알고있다.
1. 기존 JS로 작업할때는 작업한 함수 or 컴포넌트를 공유하기위해서 docs를 사용해서 공유해야했습니다.
만약 컴포넌트나 함수의가 복잡하다면 해당 파일을 찾아가야했고 공유하기 어려운 문제가있는데 TS로 작업하면 자동완성을
지원해주기 때문에 어떤 인자들이 들어갈지 직접찾아가지 않아도 알 수 있고 또한 특정 type만 사용가능하기때문에 
실행전에 미리 오류를 발견할 수 있는 장점이 있습니다.

2. TS는 자동완성을 지원해주기 때문에 단축키로 간단하게 props들을 사용 할 수있고 해당 파일을 직접찾아보지 않아도
어떤것을 사용 해야하는지 알 수 있기때문에 팀전체적인 생산성이 올라갑니다.

3. TS는 컴파일 단계에서 에러를 잡아주기때문에 JS에서는 실행했을때 오류를 발견할 수 있지만 TS에서는 코드를 작성하면서 
오류가나는것을 캐치할수 있기 때문에 런타임에러를 줄일 수 있습니다.
또한 타입을 정해줘야 하기 때문에 타입에러를 사전에 차단할 수 있습니다.

Q. 타입스크립트는 완벽할까? 단점은 무엇일까?

타입스크립트의 단점은 
1. 개인의 생산성이 떨어진다.
 프로젝트의 규모가 클 수록 TS를사용하면 팀전체적으로 작업하긴 수월해질것 같은데 매번 타입을 선언해줘야하고 
 제너릭이나 union타입등 을사용해서 좀더 컴포넌트를 일반화 시켜서 만들경우에는 코드가 길어질 것으로 예상되는데
 이는 개인의 생산성은 저하되는 요인이 아닐까 생각합니다.

 2. 가독성
타입과 변수를 매번 선언해줘야하기때문에 JS보다 코드가 길어지고 변수명과 타입명을 명확하게 선언해주지 않으면
가독성이 많이 떨어질것같습니다. 또한 타입도 단순하게 작성하는것이아니라서 길어지게 되면 코드를 이해하는데 
어려움을 주는 요인이 될것같습니다.

3. 모든에러를 잡아주는 것은아님
TS는 컴파일에러를 잡아주긴 하지만 결국 JS파일로 변환된후 실행 되기때문에 JS에서 런타임에러를 발생시키는 것들은 
여전히 동일하게 에러를 발생시킵니다. 
